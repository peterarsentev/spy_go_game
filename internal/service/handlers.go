package service

import (
	"fmt"
	tg "github.com/go-telegram-bot-api/telegram-bot-api"
	"log"
	"math/rand"
	"strconv"
	"strings"
)

func SizeMembers(bot *tg.BotAPI, update tg.Update) {
	chatID := update.Message.Chat.ID
	roleMsg := tg.NewMessage(chatID, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:")
	roleMsg.ReplyMarkup = ChooseMembersBtn()
	_, errRole := bot.Send(roleMsg)
	if errRole != nil {
		log.Printf("service.SizeMembers - can't show role: %v", errRole)
	}
}

func ChooseMembers(bot *tg.BotAPI, update tg.Update, store *Store, places *Places) {
	chatID := update.CallbackQuery.Message.Chat.ID
	messageID := update.CallbackQuery.Message.MessageID
	data := update.CallbackQuery.Data
	size, _ := strings.CutPrefix(data, "set_")
	mems, err := strconv.ParseInt(size, 10, 64)
	if err != nil {
		log.Printf("service.ChooseMembers - can't parse: %v", err)
	}
	members := int(mems)
	seed := rand.New(rand.NewSource(chatID))
	round := Round{
		SpyID:   seed.Intn(members),
		Place:   places.Get(seed.Intn(len(places.places))),
		Members: members,
		Roles:   []int{},
		seed:    seed,
	}
	store.Set(chatID, round)
	deleteMsg := tg.NewDeleteMessage(chatID, messageID)
	_, errDlt := bot.Send(deleteMsg)
	if errDlt != nil {
		log.Printf("service.ChooseMembers - can't delete: %v", errDlt)
	}

	roleMsg := tg.NewMessage(chatID, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å. –†–∞–∑–±–µ—Ä–∏—Ç–µ —Ä–æ–ª–∏:")
	roleMsg.ReplyMarkup = ShowRolesBtn(round)
	_, errRole := bot.Send(roleMsg)
	if errRole != nil {
		log.Printf("service.ChooseMembers - can't show role: %v", errRole)
	}
}

func ShowRoles(bot *tg.BotAPI, update tg.Update, store *Store) {
	chatID := update.CallbackQuery.Message.Chat.ID
	messageID := update.CallbackQuery.Message.MessageID
	deleteMsg := tg.NewDeleteMessage(chatID, messageID)
	_, errDlt := bot.Send(deleteMsg)
	if errDlt != nil {
		log.Printf("service.SizeMembers - can't show role: %v", errDlt)
	}
	data := update.CallbackQuery.Data
	size, _ := strings.CutPrefix(data, "role_")
	roles, err := strconv.ParseInt(size, 10, 64)
	if err != nil {
		log.Printf("service.ShowRoles - can't parse: %v", err)
	}
	roleID := int(roles)
	round, ok := store.Get(chatID)
	if !ok {
		roundMsg := tg.NewMessage(chatID, "–£–ø—Å.. –†–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
		_, errRole := bot.Send(roundMsg)
		if errRole != nil {
			log.Printf("service.SizeMembers - can't show round: %v", errRole)
		}
		return
	}
	round.Roles = append(round.Roles, roleID)
	store.Set(chatID, round)
	place := round.Place.name
	if round.SpyID == roleID {
		place = "–®–ø–∏–æ–Ω"
	}
	placeMsg := tg.NewMessage(chatID, place)
	placeMsg.ReplyMarkup = HideBtn()
	_, errPlace := bot.Send(placeMsg)
	if errPlace != nil {
		log.Printf("service.SizeMembers - can't show pl: %v", errPlace)
	}
}

func HideMessage(bot *tg.BotAPI, update tg.Update, store *Store) {
	chatID := update.CallbackQuery.Message.Chat.ID
	messageID := update.CallbackQuery.Message.MessageID
	deleteMsg := tg.NewDeleteMessage(chatID, messageID)
	_, errDlt := bot.Send(deleteMsg)
	if errDlt != nil {
		log.Printf("service.HideMessage - can't delete role: %v", errDlt)
	}
	round, ok := store.Get(chatID)
	if !ok {
		roundMsg := tg.NewMessage(chatID, "–£–ø—Å.. –†–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
		_, errRole := bot.Send(roundMsg)
		if errRole != nil {
			log.Printf("service.HideMessage - can't show round: %v", errRole)
		}
		return
	}
	if len(round.Roles) < round.Members {
		roleMsg := tg.NewMessage(chatID, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å. –†–∞–∑–±–µ—Ä–∏—Ç–µ —Ä–æ–ª–∏:")
		roleMsg.ReplyMarkup = ShowRolesBtn(round)
		_, errRole := bot.Send(roleMsg)
		if errRole != nil {
			log.Printf("can't show game over: %v", errRole)
		}
	}
	if len(round.Roles) == round.Members {
		roleMsg := tg.NewMessage(chatID, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å")
		roleMsg.ReplyMarkup = StopGameBtn()
		_, errRole := bot.Send(roleMsg)
		if errRole != nil {
			log.Printf("service.SizeMembers - can't start: %v", errRole)
		}
	}
}

func StopGame(bot *tg.BotAPI, update tg.Update, store *Store) {
	chatID := update.CallbackQuery.Message.Chat.ID
	messageID := update.CallbackQuery.Message.MessageID
	deleteMsg := tg.NewDeleteMessage(chatID, messageID)
	_, errDlt := bot.Send(deleteMsg)
	if errDlt != nil {
		log.Printf("service.StopGame - stop: %v", errDlt)
	}
	round, ok := store.Get(chatID)
	if !ok {
		roundMsg := tg.NewMessage(chatID, "–£–ø—Å.. –†–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
		_, errRole := bot.Send(roundMsg)
		if errRole != nil {
			log.Printf("service.StopGame - can't round: %v", errRole)
		}
		return
	}
	roleMsg := tg.NewMessage(
		chatID,
		fmt.Sprintf("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–Ω–∞. –®–ø–∏–æ–Ω: –ò–≥—Ä–æ–∫ ‚Ññ%d, –º–µ—Å—Ç–æ: %s",
			round.SpyID+1, round.Place.name),
	)
	roleMsg.ReplyMarkup = NewGameBtn()
	_, errRole := bot.Send(roleMsg)
	if errRole != nil {
		log.Printf("service.StopGame. Error: %v", errRole)
	}
}

func NewGame(bot *tg.BotAPI, update tg.Update, store *Store, places *Places) {
	var chatID int64
	callback := update.CallbackQuery
	if callback == nil {
		chatID = update.Message.Chat.ID
	}
	if callback != nil {
		chatID = update.CallbackQuery.Message.Chat.ID
	}
	round, ok := store.Get(chatID)
	if !ok {
		membersMsg := tg.NewMessage(chatID, "–í–Ω–∞—á–∞–ª–µ –∑–∞–¥–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤")
		_, errRole := bot.Send(membersMsg)
		if errRole != nil {
			log.Printf("service.NewGame - can't show role: %v", errRole)
		}
		return
	}
	newRound := Round{
		SpyID:   round.seed.Intn(round.Members),
		Place:   places.Get(round.seed.Intn(len(places.places))),
		Members: round.Members,
		Roles:   []int{},
		seed:    round.seed,
	}
	store.Set(chatID, newRound)
	roleMsg := tg.NewMessage(chatID, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å. –†–∞–∑–±–µ—Ä–∏—Ç–µ —Ä–æ–ª–∏:")
	roleMsg.ReplyMarkup = ShowRolesBtn(newRound)
	_, errRole := bot.Send(roleMsg)
	if errRole != nil {
		log.Printf("service.NewGame - can't show role: %v", errRole)
	}
}

func Start(bot *tg.BotAPI, update tg.Update) {
	msg := tg.NewMessage(update.Message.Chat.ID,
		`üé≤ *–ò–≥—Ä–∞ "–®–ø–∏–æ–Ω"*

				–≠—Ç–æ –≤–µ—Å—ë–ª–∞—è –∏–≥—Ä–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞.
				
				üë• *–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*
				1. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤.
				2. –ë–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ—Ç –æ–¥–Ω–æ –º–µ—Å—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—à–∫–æ–ª–∞").
				3. –í—Å–µ–º –∏–≥—Ä–æ–∫–∞–º, –∫—Ä–æ–º–µ –æ–¥–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —ç—Ç–æ –º–µ—Å—Ç–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –û–¥–∏–Ω –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–æ "–®–ø–∏–æ–Ω" ‚Äî –æ–Ω –Ω–µ –∑–Ω–∞–µ—Ç, –≥–¥–µ –≤—Å–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è!
				4. –ò–≥—Ä–æ–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤–æ–ø—Ä–æ—Å—ã –æ –º–µ—Å—Ç–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: _"–ß–∞—Å—Ç–æ –ª–∏ —Ç—ã –∑–¥–µ—Å—å –±—ã–≤–∞–µ—à—å?"_
				5. –¶–µ–ª—å ‚Äî –Ω–∞–π—Ç–∏ —à–ø–∏–æ–Ω–∞, –Ω–µ –≤—ã–¥–∞–≤ –ø—Ä–∏ —ç—Ç–æ–º —Å–∞–º–æ –º–µ—Å—Ç–æ.
				6. –ü–æ—Å–ª–µ –∫—Ä—É–≥–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —à–ø–∏–æ–Ω–∞.
				7. –ï—Å–ª–∏ —à–ø–∏–æ–Ω —É–≥–∞–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –ø–æ–±–µ–∂–¥–∞—é—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ. –ï—Å–ª–∏ —à–ø–∏–æ–Ω –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç ‚Äî –æ–Ω –ø–æ–±–µ–∂–¥–∞–µ—Ç. –ù–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω —É–≥–∞–¥–∞–µ—Ç, —á—Ç–æ –∑–∞ –º–µ—Å—Ç–æ –±—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ.
				
				üïµÔ∏è –ü–æ–±–µ–∂–¥–∞–µ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ª–æ–≥–∏–∫–∞ –∏ —É–º–µ–Ω–∏–µ –±–ª–µ—Ñ–æ–≤–∞—Ç—å!`)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tg.NewReplyKeyboard(
		tg.NewKeyboardButtonRow(
			tg.NewKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å"),
			tg.NewKeyboardButton("üí¨ –£—á–∞—Å—Ç–Ω–∏–∫–∏"),
			tg.NewKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ"),
		),
	)
	keyboard := msg.ReplyMarkup.(tg.ReplyKeyboardMarkup)
	keyboard.ResizeKeyboard = true
	msg.ReplyMarkup = keyboard
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("service.Start - can't show role: %v", err)
	}
}
